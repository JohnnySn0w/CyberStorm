//psuedocode template for steg. I was trying to figure some stuff out here. 

// ./steg -(bB) -(sr) -o<val> [-i<val>] -w<val> [-h<val>]
// ./steg -B -s -o1024 -i256 -wimage.jpg -hsecret.jpg > new.jpg
// ./steg -B -r -o1024 -i256 -wnew.jpg > extracted.jpg
// above is what the command line will look like


//stuff to include libraries for certain functions, esp. math and system arguments and image stuff

//#include <iostream>
#include <stdio.h> 
#include <stdlib.h>
//#include <math.h>

int sentinel[] = {0x0, 0xff, 0x0, 0x0, 0xff, 0x0};

void main (int argc, char* argv[])
{
    char args[8];
    for (int i=0; i < argc; i++)
		argrs[i] = char* argv[i];

	if (args[1] == "-b")
        bit(args[]);
    else if (args[1] == "-B")
        byte(args[]);
    else
	    printf("%s is not a valid meathod type.\n", args[1]);
}
/*
void byte(char args[])
{
	// check with gourd to see if maths need to be implemented...
	if sys.argv[3] == "starts with -o":
		o = sys.argv[3];
	else:
		calculate offset
	if sys.argv[4] == "starts with -i":
		I = interval;
	else:
		calculate interval
	
	S = sentinel;
	W = sys.argv[5];
	H = sys.argv[6];
	
	// store
	if sys.argv[2] == "-s":
		i = 0;
		while i < length(H):
			W[o] = H[i];
			o += I;
			i++;
	// retrieve
	if sys.argv[2] == "-r":
		i = 0;
		// put more here
}

void bit(char args[])
{
	// check with gourd to see if maths need to be implemented...
	if sys.argv[3] == "starts with -o":
		o = sys.argv[3];
	else:
		calculate offset
	if sys.argv[4] == "starts with -i":
		I = interval;
	else:
		calculate interval
	
	S = sentinel; (0x0 0xff 0x0 0x0 0xff 0x0)
	W = sys.argv[5];
	H = sys.argv[6];
	
	// store
	if sys.argv[2] == "-s":
		i = 0;
		j = 0;
		while j < length(H):
			for k = 0..7:
				W[i] &= 11111110
				W[i] |= ((H[j] & 10000000 >> 7))
				H[j] <<= 1
				i += I
			j++
		end while
	 
	 // retrieve
	 if sys.argv[2] == "-r":
	 	// put stuff here
		i = 0;
		j = 0;
		while j < length(W):
			for k = 0..7:
				// put more here
}

main();

*/
