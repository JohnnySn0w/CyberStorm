//psuedocode template for steg. I was trying to figure some stuff out here. 

// ./steg -(bB) -(sr) -o<val> [-i<val>] -w<val> [-h<val>]
// ./steg -B -s -o1024 -i256 -wimage.jpg -hsecret.jpg > new.jpg
// ./steg -B -r -o1024 -i256 -wnew.jpg > extracted.jpg
// above is what the command line will look like


//stuff to include libraries for certain functions, esp. math and system arguments and image stuff

//#include <iostream>
#include <stdio.h> 
#include <stdlib.h>
#include <string.h>
//#include <math.h>

int sentinel[] = {0x0, 0xff, 0x0, 0x0, 0xff, 0x0};

void main (int argc, char* argv[])
{
	// update: not doing separate functions for bit/byte. Gonna use a lot of if statements in main. It's easier that way.
	
	// will execute for bit
	if (strcmp(argv[1], "-b") == 0) 
	{
        // the bits
		printf("this will be the bit function\n");
		for (int i=0; i < argc; i++)
			printf("%s\n",argv[i]);
			// store
		if (strcmp(argv[2], "-s") == 0)
		{
			printf("Storage\n");
			/*i = 0;
			while i < length(H):
				W[o] = H[i];
				o += I;
				i++;*/
		}
		// retrieve
		if (strcmp(argv[2], "-r") == 0)
		{
			printf("Retrieval\n");
			//i = 0;
			// put more here
		}
		printf("This is the bit function\n");
	}
	
	// will execute for byte
    else if (strcmp(argv[1], "-B") == 0)
	{
		printf("this will be the byte function\n");
		for (int i=0; i < argc; i++)
			printf("%s\n",argv[i]);
	}
	
	// if something incorrect is printed
	else
	    printf("%s is not a valid method type.\n", argv[1]);
}



/*
// function I'm not using, but still referring to so I'm not rid of them just yet
void byte(char args[])
{
	// check with gourd to see if maths need to be implemented...
	/*if sys.argv[3] == "starts with -o":
		o = sys.argv[3];
	else:
		calculate offset
	if sys.argv[4] == "starts with -i":
		I = interval;
	else:
		calculate interval
	*/
	//W = sys.argv[5];
	//H = sys.argv[6];
	
/*
// bit function -- currently doesn't work
void bit(char* args[])
{
	// check with gourd to see if maths need to be implemented...
	if sys.argv[3] == "starts with -o":
		o = sys.argv[3];
	else:
		calculate offset
	if sys.argv[4] == "starts with -i":
		I = interval;
	else:
		calculate interval

	//W = sys.argv[5];
	//H = sys.argv[6];
	
	// store
	if (strcmp(args[2], "-s") == 0)
	{
		printf("Storage");
		/*
		i = 0;
		j = 0;
		while j < length(H):
			for k = 0..7:
				W[i] &= 11111110
				W[i] |= ((H[j] & 10000000 >> 7))
				H[j] <<= 1
				i += I
			j++
		end while
		
	}
	 // retrieve
	 if (strcmp(args[2], "-r") == 0)
	 {
		 printf("Retrieval");
	 	// put stuff here
		 /*
		i = 0;
		j = 0;
		while j < length(W):
			for k = 0..7:
				// put more here
				
	 }
	printf("This is the bit function.");
}
*/
